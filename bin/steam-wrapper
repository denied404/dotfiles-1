#!/bin/sh
#  Copyright (C) 2015 - 2016 Peter Kenji Yamanaka
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

##
# steam-wrapper
# Packaged by: pyamsoft <pyam(dot)soft(at)gmail(dot)com>
##

# Export the LC as the default C so that we do not run into locale based quirks
LC_ALL=C
export LC_ALL

WRAPPER_VERSION=0.6.0

# Script variables
__wrapper_debug=0
__log_location=

##
# Check the environment path for the given binary, return if it is not found
#
# $1 the binary to check on the PATH
check_for_binary()
{
  check_for_binary__bin="$1"
  check_for_binary__old_ifs="${IFS}"
  if [ -z "${check_for_binary__bin}" ]; then
    log "Must specify a path to a binary"
    return 1
  fi

  IFS=":"
  for check_for_binary__path in ${PATH}; do
    if [ -n "${check_for_binary__path}" ]; then
      check_for_binary__result=
      check_for_binary__result="${check_for_binary__path}/${check_for_binary__bin}"
      if [ -e "${check_for_binary__result}" ]; then
        IFS="${check_for_binary__old_ifs}"

        unset check_for_binary__result
        unset check_for_binary__bin
        unset check_for_binary__old_ifs
        unset check_for_binary__path
        return 0
      fi

      unset check_for_binary__result
    fi
  done

  log "Binary '${check_for_binary__bin}' not found in \$PATH"

  unset check_for_binary__result
  unset check_for_binary__bin
  unset check_for_binary__old_ifs
  unset check_for_binary__path
  return 1
}

##
# Logs output to the log file and/or stdout
#
# $@ All logging arguments
log()
{
  if [ "${__wrapper_debug}" -eq 1 ]; then
    printf -- "steam-wrapper[${WRAPPER_VERSION}]: %s\n" "$@" \
      >> "${__log_location}"
  fi

  printf -- "steam-wrapper[${WRAPPER_VERSION}]: %s\n" "$@"

  return 0
}

##
# Log opening
##
log_opening()
{
  log "$(cat << EOF
Launched on $(date +%Y-%m-%d) at $(date +%R) [$(date +%r)]
EOF
)"
  return 0
}

##
# Log the steam-wrapper configuration location
#
# $1 intended config location
log_config_location()
{
  log_config_location__conf="$1"

  log_config_location__str=
  if [ ! -z "${log_config_location__conf}" ]; then
    log_config_location__str="Configuration file found at: ${conf_location}"
  else
    log_config_location__str="Using preset defaults."
  fi

  # Log the config location
  log "${log_config_location__str}"

  unset log_config_location__conf
  return 0
}

##
# Has required Steam folders
# Steam must be launched at least once before this script can properly run
#
steam_folder_exists()
{
  if [ -d "${HOME}/.steam" ]; then
    log "Steam folder exists, can continue"
    return 0
  else
    log "Steam folder does not exist. Launch Steam first."
    return 1
  fi
}

##
# Remove some files that apperantly conflict with native runtimes on ArchLinux
#
# Read for details:
#     https://wiki.archlinux.org/index.php/steam#Steam_runtime_issues
remove_stale_files()
{
  remove_stale_files__one="${HOME}/.local/share/Steam/"
  remove_stale_files__two="${HOME}/.steam/root/"

  # Need to double up on these as the output will overwrite the logfile
  # Print to stdout and don't remove, then print to file and delete
  log "Removing of stale libraries..."
  find_remove_stale_files "${remove_stale_files__one}" " " || return 1
  find_remove_stale_files "${remove_stale_files__two}" " " || return 1

  find_remove_stale_files "${remove_stale_files__one}" "-delete" \
    >> "${__log_location}" || return 1
  find_remove_stale_files "${remove_stale_files__two}" "-delete" \
    >> "${__log_location}" || return 1

  log "All stale libraries removed"

  unset remove_stale_files__one
  unset remove_stale_files__two
  return 0
}

##
# Remove some files that apperantly conflict with native runtimes on ArchLinux
#
# Takes find start location as $1 and the delete option as $2 when used
#
# $1 location to search for stale files
# $2 an optional command to run on the files, do not quote
find_remove_stale_files()
{
  find_remove_stale_files__dst="$1"
  find_remove_stale_files__cmd="$2"

  if [ -d "${find_remove_stale_files__dst}" ]; then
    # shellcheck disable=SC2086
    find "${find_remove_stale_files__dst}" \( -name "libgcc_s.so*" \
      -o -name "libasound.so*" \
      -o -name "libstdc++.so*" \
      -o -name "libgpg-error.so*" \
      -o -name "libxcb.so*" \) \
      -print ${find_remove_stale_files__cmd} || return 1
  fi

  unset find_remove_stale_files__dst
  unset find_remove_stale_files__cmd
  return 0
}

##
# Log the wrapper variables used.
##
log_wrapper_usage()
{
  log "$(cat << EOF
Done. Launching Steam with environment:

    STEAM_RUNTIME = ${use_runtime}
    STEAM_FRAME_FORCE_CLOSE = ${close_to_tray}
    LD_PRELOAD = ${LD_PRELOAD}
EOF
)
"
  return 0
}

##
# Searches for the steam-wrapper.conf file in a couple of specified locations.
# The first found file will be used as the configuration file
#
# Echoes out result
find_conf()
{
  find_conf__location=

  if [ -f "${HOME}/.steam-wrapper/steam-wrapper.conf" ]; then
    find_conf__location="${HOME}/.steam-wrapper/steam-wrapper.conf"
  elif [ -f "${HOME}/.steam-wrapper.conf" ]; then
    find_conf__location="${HOME}/.steam-wrapper.conf"
  elif [ -f "/etc/steam-wrapper/steam-wrapper.conf" ]; then
    find_conf__location="/etc/steam-wrapper/steam-wrapper.conf"
  elif [ -f "/etc/steam-wrapper.conf" ]; then
    find_conf__location="/etc/steam-wrapper.conf"
  else
    find_conf__location=""
  fi

  # Echo out location
  printf -- "${find_conf__location}"

  unset find_conf__location
  return 0
}

##
# Display any known fixes for common issues with certain games
#
# $1 game name
display_fix_for_game()
{
  display_fix_for_game__name="$1"
  case "${display_fix_for_game__name}" in
    "bl2"|"borderlands2")
      log "$(cat << EOF


Borderlands 2

Can not connect to SHIFT

On non-Ubuntu systems, the /usr/lib/ssl directory may
not always be present. Borderlands 2 expects a certain
SSL cert to be present in this directory, and SHFIT will
if it is not found. To fix this, supply the SSL_CERT_DIR in
the game launch options:

SSL_CERT_DIR="/etc/ssl/certs" %command% <launch options>

==========================================================

Fails to Launch, complains about mismatched size in shared libraries

This can happen when your graphic drivers expect newer versions of
the stale steam libraries. Normally, we override the libraries in
a non-destructive way via LD_PRELOAD. In the case of BL2, it seems
that the game refuses to launch without deleting the stale libraries first.
Pass the -d (delete-stale) option to steam wrapper and see if this
allows you to launch BL2
EOF
)"
      ;;
    *)
      log "Unsupported game: ${display_fix_for_game__name}"
  esac

  # Displaying fixes are currently a one stop shop.
  return 0
}

##
# Prints out the current script version
print_version()
{
  printf -- "steam-wrapper[${WRAPPER_VERSION}]\n"
  return 0
}

##
# Print out help dialog
print_help()
{
  print_version
  printf -- "%s\n" "$(cat << EOF
option

  -r  <0|1>   Use the steam runtime
  -t  <0|1>   Close Steam to tray
  -b  <0|1>   Force running in 32bit mode (64 bit only)
  -l          Display the log file
  -D          Delete stale runtime libraries
  -f  <game>  Display fixes for Steam games

supported fixes
  bl2                    Borderlands 2

-v|--version             Display the current version
-h|--help                Display this help
EOF
)"

  return 0
}

##
# Prepares Steam to run either by removing stale libraries or overloading LD_PRELOAD
#
# $1 flag to delete files
# $2 flag to overload runtime
prepare_steam_environment()
{
  prepare_steam_environment__delete="$1"
  prepare_steam_environment__overload="$2"

  if [ "${prepare_steam_environment__delete}" -eq 1 ]; then
    # Remove the stale runtime files
    remove_stale_files || return 1
  elif [ "${prepare_steam_environment__overload}" -eq 1 ]; then
    # Otherwise export the overriden LD_PRELOAD environment
    # shellcheck disable=SC2016
    LD_PRELOAD='/usr/$LIB/libstdc++.so.6 /usr/$LIB/libgcc_s.so.1 /usr/$LIB/libxcb.so.1 /usr/$LIB/libgpg-error.so /usr/$LIB/libasound.so.2' || return 1
    export LD_PRELOAD
  fi

  unset prepare_steam_environment__delete
  unset prepare_steam_environment__overload
  return 0
}

##
# Display the log file in the system pager
show_log_in_pager()
{
  # Display pager if asked

  # Check for the PAGER environment variable
  # Conditional assignment works when using the set -u option
  : "${PAGER:=less}"

  # Using the pager requires extra binary
  check_for_binary "${PAGER}" || return 1
  log "Displaying ${__log_location} in ${PAGER}..."

  "${PAGER}" "${__log_location}" || return 1
  log "Exiting..."

  # Clean exit
  return 0
}

main()
{
  __wrapper_debug=1
  use_runtime=1
  force_32bit=0
  close_to_tray=1
  delete_stale=0
  logdir="${HOME}/.steam-wrapper/"

  # First source the config from a location
  conf_location=$(find_conf) || return 1

  ##
  # If a configuration file was present, source it for use, otherwise
  # we will use pre-defined varialbes which are arguably sensible by
  # default.
  if [ ! -z "${conf_location}" ]; then
    # shellcheck disable=SC1090
    . "${conf_location}"
  fi

  # Create logdir
  __log_location="${logdir}/steam-wrapper.log"
  check_for_binary mkdir || return 1
  mkdir -p "${logdir}" || return 1

  # Parse options
  shift_count=0
  while getopts ":hvr:t:b:ldf:" option; do
    case "${option}" in
      b)
        log "force_32bit overridden on commandline ${OPTARG}"
        force_32bit="${OPTARG}"
        shift_count=$((shift_count + 2))
        ;;
      r)
        log "use_runtime overridden on commandline: ${OPTARG}"
        use_runtime="${OPTARG}"
        shift_count=$((shift_count + 2))
        ;;
      t)
        log "close_to_tray overridden on commandline: ${OPTARG}"
        close_to_tray="${OPTARG}"
        shift_count=$((shift_count + 2))
        ;;
      l)
        log "display_pager overridden on commandline."
        show_log_in_pager || return 1
        return 0
        ;;
      d)
        log "delete_stale overridden on commandline."
        delete_stale=1
        shift_count=$((shift_count + 1))
        ;;
      f)
        log "fix_game overridden on commandline: ${OPTARG}"
        display_fix_for_game "${OPTARG}" || return 1
        return 0
        ;;
      v)
        print_version || return 1
        return 0
        ;;
      h)
        print_help || return 1
        return 0
        ;;
      *)
        log "Unknown option passed, stop parsing: ${OPTARG}"
        break
        ;;
    esac
  done

  if [ "${shift_count}" -ne 0 ]; then
    shift "${shift_count}"
  fi

  check_for_binary find || return 1
  check_for_binary linux32 || return 1
  check_for_binary uname || return 1
  check_for_binary steam || return 1

  log_opening || return 1
  log_config_location "${conf_location}" || return 1
  steam_folder_exists || return 1
  prepare_steam_environment "${delete_stale}" "${use_runtime}" || return 1
  log_wrapper_usage || return 1


  # Log completion
  # Extra newline
  log "Run complete, launch Steam"

  # Export vars
  STEAM_RUNTIME="${use_runtime}"
  STEAM_FRAME_FORCE_CLOSE="${close_to_tray}"

  export STEAM_RUNTIME
  export STEAM_FRAME_FORCE_CLOSE

  log "Passing arguments through to steam: '$*'"

  # Fix a dbus related crash
  DBUS_FATAL_WARNINGS=0
  export DBUS_FATAL_WARNINGS

  ##
  # Run steam using the wrapper
  # steam will be autoresolved by the path
  if [ "${force_32bit}" -eq 1 ] && [ "$(uname -m)" = "x86_64" ]; then
    log "Running in 32 bit mode"

    # Unset here
    unset use_runtime
    unset close_to_tray
    unset steam_args
    unset logdir
    unset delete_stale
    unset __log_location
    unset __wrapper_debug

    exec linux32 steam "$*"
  else
    # Unset here
    unset use_runtime
    unset close_to_tray
    unset steam_args
    unset logdir
    unset delete_stale
    unset __log_location
    unset __wrapper_debug

    exec steam "$*"
  fi
}

# Call main
main "$@" || exit 1

# vim: set syntax=sh tabstop=2 softtabstop=2 shiftwidth=2 shiftround:

