global !p
import re
import os.path
import vim

import px.go
import px.all
endglobal

snippet e "defer" "snip.context=snip" bwe
`!p
left = " "
right="()"
right = right[10]
if "\n" in t[1]:
	tabs = snip.context.column-1
	left = " func(){"
	right = "\n"+(tabs*"\t")+"}()"
`defer`!p snip.rv=left`$1`!p snip.rv=right`
endsnippet

snippet "\s=\s" "Description" r
`!p snip.rv=" == "`
endsnippet

snippet "\s==\s" "Description" r
`!p snip.rv=" != "`
endsnippet

snippet "\s!=\s" "Description" r
`!p snip.rv=" == "`
endsnippet

snippet "\s!=\sn" "Description" r
`!p snip.rv=" != nil"`
endsnippet

snippet "\s==\sn" "Description" r
`!p snip.rv=" == nil"`
endsnippet

snippet pld "provider.log.Debug" w
provider.log.Debug("$1")
endsnippet

snippet pldf "provider.log.Debug" w
provider.log.Debug("`!p snip.rv=t[1]`: %#v", $1)
endsnippet

snippet jfe "log.Fatal err" w
log.Fatal(err.Error())
endsnippet

snippet jff "log.Fatal with format errrrrrr" w
log.Fatal("$1: %s", err)
endsnippet

snippet jf "log.Fatal" w
log.Fatal($1)
endsnippet

snippet jd "log.Debug" w
log.Debug($1)
endsnippet

snippet ji "log.Debug" w
log.Info($1)
endsnippet

snippet doca "docopt.Parse" w
args, err := docopt.Parse(usage, nil, true, "1.0", false)
if err != nil {
	panic(err)
}
$0
endsnippet

snippet (s "(string" i
(string
endsnippet

snippet ([]s "([]string" i
([]string
endsnippet

snippet (b "(bool" i
(bool
endsnippet

snippet (i "(int" i
(int
endsnippet

snippet a "arg" "px.util.match_higher_indent(snip.buffer, (snip.line, 0), '^var \(')" wbe
$1 = args["$2"].($3)
$0
endsnippet

snippet a "arg" w
args["$1"].($2)
endsnippet

snippet dcp "docopt" w
args, err := docopt.Parse(usage, nil, true, version, true, true)
if err != nil {
	panic(err)
}
endsnippet
