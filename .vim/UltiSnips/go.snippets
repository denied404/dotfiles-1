snippet df "defer" "snip.context=snip" bwe
`!p
left = " "
right="()"
if "\n" in t[1]:
	tabs = snip.context.column-1
	left = " func(){"
	right = "\n"+(tabs*"\t")+"}()"
`defer`!p snip.rv=left`$1`!p snip.rv=right`
endsnippet

snippet "\s=\s" "Description" r
`!p snip.rv=" == "`
endsnippet

snippet "\s==\s" "Description" r
`!p snip.rv=" != "`
endsnippet

snippet "\s!=\s" "Description" r
`!p snip.rv=" == "`
endsnippet

snippet "\s!=\sn" "Description" r
`!p snip.rv=" != nil"`
endsnippet

snippet "\s==\sn" "Description" r
`!p snip.rv=" == nil"`
endsnippet

snippet pld "provider.log.Debug" w
provider.log.Debug("$1")
endsnippet

snippet pldf "provider.log.Debug" w
provider.log.Debug("`!p snip.rv=t[1]`: %#v", $1)
endsnippet

snippet jce "log.Critical err" w
log.Critical(err)
endsnippet

snippet jcf "log.Critical with format errrrrrr" w
log.Critical("$1: %s", err)
endsnippet

snippet jc "log.Critical" w
log.Critical($1)
endsnippet

snippet jd "log.Debug" w
log.Debug($1)
endsnippet

snippet doca "docopt.Parse" w
args, err := docopt.Parse(usage, nil, true, "1.0", false)
if err != nil {
	panic(err)
}
$0
endsnippet

snippet (s "(string" i
(string
endsnippet

snippet ([]s "([]string" i
([]string
endsnippet

snippet (b "(bool" i
(bool
endsnippet

snippet (i "(int" i
(int
endsnippet
