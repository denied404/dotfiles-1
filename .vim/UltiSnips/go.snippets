global !p
import px.go
import re
endglobal

snippet n "func" bw
func $1($2) $3${3/.+/ /}{
	$4
}
endsnippet

global !p
def should_expand_case(buffer, line):
    if not px.go.is_switch(buffer, line):
        return False

    switch_line = px.go.get_bracket_line(buffer, line)
    switch_line_indent = px.util.get_indentation(buffer[switch_line])

    if switch_line_indent == px.util.get_indentation(buffer[line]):
        return True

    return False
endglobal

snippet c "case" "should_expand_case(snip.buffer, snip.line)" bweA
case $1:
	$2
$3
endsnippet

snippet "^s$" "type struct" "px.go.is_before_first_func(snip.buffer, snip.line)" bwreA
`!p
if re.match("^([\w\[\]{}]+)$", t[2]):
        type_left = " "
        type_right = ""
else:
        type_left = " struct {\n\t"
        type_right = "\n}"
        if re.match("^\w+\(\)", t[2]):
                type_left = " interface {\n\t"
`type $1`!p snip.rv=type_left`$2`!p snip.rv=type_right`
$0
endsnippet

snippet p "package" "snip.line == 0" bweA
package ${1:`!p snip.rv=px.go.guess_package_name_from_file_name(snip.fn)`}

$0
endsnippet

snippet "package m" "package main" bwrA
package main

$0
endsnippet

snippet m "package and main" "snip.line == 0" bweA
package main

func main() {
	$0
}
endsnippet

snippet p "panic" "re.match('^\s+if err ', px.util.get_prev_nonempty_line(snip.buffer, snip.line))" bweA
panic(err)
endsnippet

snippet lf "log.fatal" "re.match('^\s+if err ', px.util.get_prev_nonempty_line(snip.buffer, snip.line))" bweA
log.Fatal(err)
endsnippet

global !p
def get_value_for_if():
	value = px.all.get_last_var_for_snippet()
	if value == 'err':
		value = 'err != nil'

	return value
endglobal

priority -1
pre_expand "snip.context = get_value_for_if()"
snippet i "if" bw
if ${1:`!p snip.rv=snip.context`} {
    ${2:${VISUAL}}
}
endsnippet

snippet i "integer field" "px.go.is_type_declaration(snip.buffer, snip.line)" bwe
$1 int
endsnippet

snippet i "integer field" "px.go.is_func_declaration(snip.buffer, snip.line)" we
$1 int,
endsnippet

snippet e "integer field" "px.go.is_func_declaration(snip.buffer, snip.line)" we
error
endsnippet

snippet s "string field" "px.go.is_type_declaration(snip.buffer, snip.line)" bwe
$1 string
endsnippet

snippet s "string field" "px.go.is_func_declaration(snip.buffer, snip.line)" we
$1 string,
endsnippet

snippet f "float field" "px.go.is_type_declaration(snip.buffer, snip.line)" bwe
$1 float64
endsnippet

snippet f "float field" "px.go.is_func_declaration(snip.buffer, snip.line)" we
$1 float64,
endsnippet

snippet m "map field" "px.go.is_type_declaration(snip.buffer, snip.line)" bwe
$1 map[${2:string}]${3:interface{}}
endsnippet

snippet m "string field" "px.go.is_func_declaration(snip.buffer, snip.line)" we
$1 map[${2:string}]${3:interface{}}$4,
endsnippet

priority -1
snippet ii "if <VISUAL>" bwA
if ${VISUAL} {
	$1
}
endsnippet

snippet q "if err != nil" bw
if err != nil {
	return err
}
endsnippet

snippet fe "fmt.Errorf" wA
fmt.Errorf("$1: %s", ${2:${VISUAL:err}})
endsnippet

snippet ff "fmt.Errorf" wA
fmt.Errorf("$1")
endsnippet

snippet qe "if err != nil" bwA
if err != nil {
	return fmt.Errorf("$1: %s", err.Error())
}
endsnippet

snippet qq "if err != nil" bwA
if err != nil {
	return ${1:nil}, err
}
endsnippet

snippet qqe "if err != nil" bwA
if err != nil {
	return ${1:nil}, fmt.Errorf("$2: %s", err.Error())
}
endsnippet

snippet qp "if err != nil panic" bwA
if err != nil {
	panic(err)
}
endsnippet

snippet qn "if ... == nil" bwA
if ${1:value} == nil {
	${0:${VISUAL}}
}
endsnippet

snippet r "return" bw
return $1
endsnippet

global !p
def should_expand_r(buffer, line):
	if re.match('^\s+if ', buffer[line-1]):
		return True

	if buffer[line-1].strip() == '' and buffer[line+1].strip() == '}':
		return True

	return False
endglobal

snippet r "return" "should_expand_r(snip.buffer, snip.line)" bweA
return $1
endsnippet

snippet r "return" "re.match('^\s+if err ', px.util.get_prev_nonempty_line(snip.buffer, snip.line))" eb
return err
endsnippet

snippet r "return" "should_expand_r(snip.buffer, snip.line) and re.match('^\s+if err ', px.util.get_prev_nonempty_line(snip.buffer, snip.line))" eb
return err
endsnippet

snippet fs "... string" bw
$1 string$2
endsnippet

snippet exp "test expected" w
actual := ${1:"Something"}
if actual != ${2:"Actual"} {
	t.Fatalf("unexpected %#v", actual)
}
endsnippet

snippet ,e ", err" iA
, err$0
endsnippet

snippet "}(.)" "else" bwrA
} else {
	`!p snip.rv=match.group(1)`$1
}
endsnippet

snippet co "const" bw
const (
	$1 = $2
)
endsnippet

snippet ci "const iota" w
const (
	${1:CONSTANT} = iota$2
)
endsnippet

snippet ass "anon struct with fields" w
struct {
	$1
}{
	$2
}
endsnippet

snippet "((\w+)\s*([\w\[\]]+)) js$" "json annotation" br
`!p snip.rv=match.group(1)` \`json:"`!p
snip.rv=px.all.convert_camelcase_to_snakecase(match.group(2))`"\`
endsnippet

snippet fm "func main" bw
func main() {
	$1
}
endsnippet

snippet fas "anon struct" w
${1:Name} struct {
	$2
}
endsnippet

snippet fi "field int" bw
${1:Name} int
endsnippet

snippet fb "field bool" bw
${1:Name} bool
endsnippet

snippet mp "map" w
map[${1:string}]${2:interface}
endsnippet

snippet msi "map[string]interface" w
map[string]interface{}
endsnippet

snippet sw "switch" bwA
switch ${1:name} {
case ${2:true}:
	$3
$4
}
endsnippet

snippet swt "switch true" bw
switch {
case ${1}:
	$2
$3
}
endsnippet

snippet f "for range" bw
for ${1:_}, ${2:val} := range ${3:Slice} {
	${4:${VISUAL}}
}
endsnippet

snippet pr "log.Printf(%#v" bw
log.Printf("`!p snip.rv=t[1]`: %#v", $1)
endsnippet

snippet play "package main" bw
package main

import "fmt"

func main() {
	$0
}
endsnippet

snippet omit "omit section" w
// OMIT
${0:${VISUAL}}
// END OMIT
endsnippet

snippet af "anon func" iw
func($1) $2{
	${0:${VISUAL}}
}
endsnippet

snippet vr "var" bw
var (
	$1
)
endsnippet

snippet cs "case" bw
case $1:
	$2
endsnippet

snippet rn "return nil" bw
return nil
endsnippet

snippet ap "append" bw
${1:slice} = append($1, $2)
endsnippet

snippet ms "make slice" w
make([]$1, ${2:0})
endsnippet

snippet mc "make chan" w
make(chan $1, ${2:0})
endsnippet

snippet mm "make map" w
make(map[${1:string}]${2:interface\{\}})
endsnippet

snippet nn "!= nil" w
${1:${VISUAL}} != nil
endsnippet

snippet if "interface" w
interface{}
endsnippet

snippet ts "type switch" bw
switch ${1:newVar} := ${2:checkVar}.(type) {
case ${3:Type}:
	$4
}
endsnippet

snippet ,n ", nil" i
, nil
endsnippet

snippet n, ", nil" i
nil,
endsnippet

snippet "return n" "return nil" bw
return nil
endsnippet

snippet frr "forever" bw
for {
	$1
}
endsnippet

snippet ae "blah, err := " bw
${1:data}, err :=
endsnippet

snippet a "blah := " bw
${1:data} :=
endsnippet


snippet qt "t.fatal" bw
if err != nil {
	t.Fatal(err)
}
endsnippet

snippet tf "t.fatalf" bw
t.Fatalf("$1")
endsnippet

snippet qr "fmt errorf" bw
if err != nil {
	fmt.Errorf(err.Error())
	os.Exit(1)
}
endsnippet

snippet qf "log fatal" bw
if err != nil {
	log.Fatal(err)
}
endsnippet

snippet qff "log fatalf" bw
if err != nil {
	log.Fatalf(\`$1: %s\`, $2, err)
}
endsnippet

snippet rt "return true" bw
return true
endsnippet

snippet fa "false" w
false
endsnippet

snippet tr "false" w
true
endsnippet

snippet rf "return false" bw
return false
endsnippet

snippet d "define method" bw
`!p
return_left = ''
return_right = ''

if "," in t[3]:
	return_left = '('
	return_right = ')'
`
func (`!p snip.rv=' '.join(px.go.extract_prev_method_binding_for_cursor())`) $1($2) `!p snip.rv=return_left`$3`!p snip.rv=return_right` {
	$5
}
endsnippet

snippet re "return errors.New" bw
return errors.New($1)
endsnippet

snippet y "error" w
error
endsnippet

snippet lf "log.Printf" w
log.Printf($1)
endsnippet

snippet td "todo" bw
// @TODO:
endsnippet

snippet l "last slice usage" iw
${1:`!p snip.rv=px.go.get_previous_slice_usage()`}[$2]
endsnippet

snippet "(func\s.*\)\s+)([\w\d_\s\{\}\[\]\*\.]+),\s?([\w\d_\s\{\}\[\]\*\.]+)" "return multiple" r
`!p snip.rv=match.group(1)`(`!p snip.rv=match.group(2)`, `!p snip.rv=match.group(3)`)
endsnippet

snippet "^\)\s+?([\w\d_\s\{\}\[\]\*\.]+),\s+?([\w\d_\s\{\}\[\]\*\.]+)" "return multiple" r
) (`!p snip.rv=match.group(1)`, `!p snip.rv=match.group(2)`)
endsnippet

snippet for "for loop" bw
for $1 {
    $2
}
endsnippet

snippet lp "log.Println" wA
`!p
left = ''
right = ''
if " " in t[1] and not '"' in t[1]:
	left = '"'
	right = '"'
`log.Println(`!p snip.rv=left`$1`!p snip.rv=right`)
endsnippet

snippet fp "fmt.Println" wA
fmt.Println($1)
endsnippet

snippet e "fmt.Printf" bw
fmt.Printf("`!p snip.rv=t[1]`: %v\n", $1)
endsnippet

snippet ej "print json" bw
`!p
from random import randint

name = t[1] + str(randint(10, 9999))
`ej`!p snip.rv=name`, _ := json.MarshalIndent($1, "", "  ")
fmt.Printf("`!p snip.rv=t[1]`: %s\n", string(ej`!p snip.rv=name`))
endsnippet

snippet te "func Test" bw
func Test$1(t *testing.T) {
	$2
}
endsnippet

snippet , "return ... , nil" "px.go.is_return_argument(snip.buffer, snip.line, snip.column)" ie
, `!p if px.go.is_in_err_condition(vim.current.buffer, vim.current.window.cursor[0], vim.current.window.cursor[1]):
	snip.rv = "err"
else:
	snip.rv = "nil"`
endsnippet

snippet ef "fmt.Errorf" i
fmt.Errorf($1, $2)
endsnippet

snippet t "this instance" w
`!p
buffer = vim.current.buffer
line, column = vim.current.window.cursor

result = 't'
while True:
	line = line - 1
	if line == 0:
		break

	line_contents = buffer[line - 1]
	matches = re.match(r'(?m)^func \(([^)]+)\s+([^)]+)\) ', line_contents)
	if not matches:
		continue

	result = matches.group(1)
	break


snip.rv=result`
endsnippet

snippet v "var ()" bw
var (
	$1
)
endsnippet

snippet = "=" w
$1 = $2
endsnippet

snippet /n "!= nil"
!= nil$0
endsnippet

snippet .n "== nil"
== nil$0
endsnippet

global !p
def gocode_complete_function(snip):
	snippet = px.go.get_snippet_gocode_complete_function()
	snip.buffer[snip.line] = re.sub('[\w\.]', '', snip.buffer[snip.line])
	snip.expand_anon(snippet)
endglobal

pre_expand "gocode_complete_function(snip)"
snippet "\w+\.\w+" "gocode complete" "px.go.gocode_can_complete()" wbre
endsnippet

global !p
def should_expand_amp(buffer, line, column):
	line_contents = buffer[line]
	if line_contents[column - 2] == ':':
		return False

	if line_contents[column - 2] == '=':
		return False

	return True
endglobal

snippet & "should_expand_amp(snip.buffer, snip.line, snip.column)" Awe
&& $0
endsnippet

snippet = ":=" iA
`!p snip.rv=" = "`
endsnippet

snippet "= \" "wut" wA
`!p snip.rv=":= "`
endsnippet
