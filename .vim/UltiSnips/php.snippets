## Snippets from SnipMate, taken from
## https://github.com/scrooloose/snipmate-snippets.git


snippet array "array"
$${1:arrayName} = ['${2}' => ${3}];${4}
endsnippet

snippet doc_f "doc_f"
/**
 * $2
 *
 * @return ${4:void}
 **/
${1:public }function ${2:someFunc}(${3})
{${6}
}
endsnippet

snippet cl "class"
/**
 * $1
 *
 * @category ${2:Auto}
 * @package ${3}
 * @author Egor Kovetskiy <e.kovetskiy@office.ngs.ru>
 */
class ${1:someClass}
{${4}
}
endsnippet

snippet e "else"
else {
	${1:// code...}
}
endsnippet

snippet for "for"
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${4:// code...}
}
endsnippet

snippet foreachk "foreachk"
foreach ($${1:variable} as $${2:key} => $${3:value}){
	${4:// code...}
}
endsnippet

snippet i "if"
if ($1) {
	$2
}
endsnippet

snippet log "log"
error_log(print_r(['$1' => ${1}], true));${2}
endsnippet

snippet get "PHP Class Getter" !b
/*
 * Возвращает $3
 */
public function get${1/[a-zA-Z]/\u$0/}() 
{
    return $this->_$1;$2
}
$4
endsnippet

snippet set "PHP Class Setter" !b
/*
 * Устанавливает $5
 */
public function set${1/\w+\s*/\u$0/}($$1)
{
    $this->_$1 = $$1;$3
    ${4:return $this;}
}
$0
endsnippet

snippet pubf "Public function" !b
public function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet prof "Protected function" !b
protected function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet prif "Private function" !b
private function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pubs "Public static function" !b
public static function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pros "Protected static function" !b
protected static function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pris "Private static function" !b
private static function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet fu "Function snip" !b
function ${1:name}(${2:$param}) 
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet
# :vim:ft=snippets

snippet fore "Foreach loop"
foreach ($${1:variable} as $${3:value}){
    ${VISUAL}${4}
}
$0
endsnippet

snippet new "New class instance" !b
$$1 = new $1($2);
$0
endsnippet


snippet ife "if else"
if (${1:/* condition */}) {
    ${2:// code...}
} else {
    ${3:// code...}
}
$0
endsnippet

snippet r "return"
return $1;
endsnippet

# :vim:ft=snippets:


snippet t "$this"
$this->$1
endsnippet

snippet ld "log debug"
$this->_di->getLogger()->debug("$1");
$0
endsnippet

snippet li "log info"
$this->_di->getLogger()->info("$1");
$0
endsnippet
