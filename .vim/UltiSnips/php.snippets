global !p
from php import *
endglobal

snippet forr "foreach" bw
foreach (${1:`!p snip.rv=get_last_used_identifier()`} as $2) {
	$3
}
endsnippet

snippet n "New class instance" b
$1 = new $2($3);
endsnippet

snippet r "return" bw
return $1;
endsnippet

snippet rt "return true" bw
return true;
endsnippet

snippet rf "return false" bw
return false;
endsnippet

snippet rn "return null" bw
return null;
endsnippet

snippet t "$this" w
$this->$1
endsnippet

snippet td "$this->_di->get" bw
$this->_di->get$1()${2:->}
endsnippet

snippet pr "log debug" bw
$this->_di->getLogger()->debug($1);
endsnippet

snippet ld "log debug" bw
$this->_di->getLogger()->debug("$1");
endsnippet

snippet li "log info" bw
$this->_di->getLogger()->info("$1");
endsnippet

snippet le "log exception" bw
$this->_di->getLogger()->exception(`!p snip.rv=get_last_used_identifier()`);
endsnippet

snippet i "if" bw
if ($1) {
	$2
}$3
endsnippet

snippet ei "elseif" iw
 elseif ($1) {
	$2
}
endsnippet

snippet e "else" iw
 else {
	$1
}
endsnippet

snippet uf "public function" bw
/**
 * $3
 *
 * $4
 */
public function $1($2)
{
	$5
}
endsnippet

snippet vf "private function" bw
/**
 * $3
 *
 * $4
 */
private function _$1($2)
{
	$5
}
endsnippet

snippet pf "protected function" bw
/**
 * $3
 *
 * $4
 */
protected function _$1($2)
{
	$5
}
endsnippet

snippet u "public variable" bw
/**
 * $2
 *
 * @var $3
 */
public $$1;
endsnippet

snippet u= "public variable with variable" bw
/**
 * $3
 *
 * @var $4
 */
public $$1 = $2;
endsnippet

snippet v "private variable" bw
/**
 * $2
 *
 * @var $3
 */
private $_$1;
endsnippet

snippet v= "private variable with variable" bw
/**
 * $3
 *
 * @var $4
 */
private $_$1 = $2;
endsnippet

snippet p "protected variable" bw
/**
 * $2
 *
 * @var $3
 */
protected $_$1;
endsnippet

snippet p= "protected variable with variable" bw
/**
 * $3
 *
 * @var $4
 */
protected $_$1 = $2;
endsnippet

snippet ar "array" w
array($1)
endsnippet

snippet vd "variable declaration" bw
${1:`!p snip.rv=get_last_used_identifier()`} = $2
endsnippet

snippet vdt "variable declaration" bw
${1:`!p snip.rv=get_last_used_identifier()`} = $this->$2
endsnippet

snippet dv "variable declaration" bw
$1 = ${2:`!p snip.rv=get_last_used_identifier()`}
endsnippet

snippet tdv "variable declaration" bw
$this->$1 = ${2:`!p snip.rv=get_last_used_identifier()`}
endsnippet

snippet em "empty" !w
empty($1)
endsnippet

snippet is "isset" !w
isset($1)
endsnippet

snippet te "throw exception" bw
throw new $1($2);
endsnippet

snippet try "try catch" bw
try {
	${1:${VISUAL}}
} catch ($2 $e) {
	${3:te }
}
endsnippet

snippet l "error_log" w
error_log(print_r([$1], true));
endsnippet

snippet lv "error_log variable" w
error_log(print_r(['$1' => $1], true));
endsnippet

snippet > "=>" w
$1 => $2,
endsnippet

snippet "* c" "PhpDoc for class" b
`!p
import subprocess;
import vim;

_fp = vim.eval('expand("%p")').split('/')
_category = _fp[0]
_package = '_'.join(_fp[:2])

_name = subprocess.check_output(["git", "config", "user.name"]).strip()
_email = subprocess.check_output(["git", "config", "user.email"]).strip()
_author = _name + " <" + _email + ">"

`* @category `!p snip.rv=_category`
* @package `!p snip.rv=_package`
* @author `!p snip.rv=_author`
endsnippet
