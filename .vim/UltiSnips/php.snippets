global !p
# see ~/.vim/pythonx/php.py
from php import *
endglobal

snippet cl "class"
class ${1:`!p snip.rv=get_class_name_with_underscored_namespaces()`}$2
{
    $3
}
endsnippet

snippet ex "extends"
extends $1
endsnippet

snippet new "New class instance" !b
$$1 = new $1($2);
endsnippet

snippet r "return"
return $1;
endsnippet

snippet rt "return true"
return true;
endsnippet

snippet rf "return false"
return false;
endsnippet

snippet rn "return null"
return null;
endsnippet

snippet t "$this" !w
$this->$1
endsnippet

snippet td "$this->_di->get"
$this->_di->get$1()${2:->}
endsnippet

snippet pr "log debug"
$this->_di->getLogger()->debug($1);
endsnippet

snippet ld "log debug"
$this->_di->getLogger()->debug("$1");
endsnippet

snippet li "log info"
$this->_di->getLogger()->info("$1");
endsnippet

snippet i "if"
if ($1) {
	$2
} $3
endsnippet

snippet ei "elseif"
elseif ($1) {
	$2
} $3
endsnippet

snippet e "else"
else {
	$1
}
endsnippet

snippet uf "public function"
/**
 * $4
 *
 * $5
 */
public function $1($2)
{
	$3
}
endsnippet

snippet vf "private function"
/**
 * $4
 *
 * $5
 */
private function _$1($2)
{
	$3
}
endsnippet

snippet pf "protected function"
/**
 * $4
 *
 * $5
 */
protected function _$1($2)
{
	$3
}
endsnippet

snippet u "public variable"
/**
 * $2
 *
 * @var $3
 */
public $$1;
endsnippet

snippet u= "public variable with variable"
/**
 * $3
 *
 * @var $4
 */
public $$1 = $2;
endsnippet

snippet v "private variable"
/**
 * $2
 *
 * @var $3
 */
private $_$1;
endsnippet

snippet v= "private variable with variable"
/**
 * $3
 *
 * @var $4
 */
private $_$1 = $2;
endsnippet

snippet p "protected variable"
/**
 * $2
 *
 * @var $3
 */
protected $_$1;
endsnippet

snippet p= "protected variable with variable"
/**
 * $3
 *
 * @var $4
 */
protected $_$1 = $2;
endsnippet

snippet a "array" !w
array($1)
endsnippet

snippet = "variable declaration"
$$1 = $2;
endsnippet

snippet em "empty" !w
empty($1)
endsnippet

snippet is "isset" !w
isset($1)
endsnippet

snippet te "throw exception"
throw new $1($2);
endsnippet

snippet try "try catch"
try {
	${1:${VISUAL}}
} catch ($2 $e) {
	${3:te }
}
endsnippet

snippet "(protected \$([\w.]+).*ps)" "protected setter" r
`!p 
_line = match.group(1)[:-2]
_cid = get_camelcase_identifier_from_string(_line, False)
_id = get_identifier_from_string(_line, False)
_phpdoc = get_phpdoc_variables_after_cursor()
_var = '$2'
if 'var' in _phpdoc:
	_var = _phpdoc['var']
snip.rv=_line`$0


/**
 * $1
 *
 * @param `!p snip.rv=_var` $$3
 * @return $this
 */
protected function _set`!p snip.rv=_cid`($$3)
{
    $this->`!p snip.rv=_id` = $$3;

    return $this;
}
endsnippet

snippet "((protected|public|private) \$([\w.]+).*pg)" "protected getter" r
`!p 
_line = match.group(1)[:-2]
_cid = get_camelcase_identifier_from_string(_line, False)
_id = get_identifier_from_string(_line, False)
_phpdoc = get_phpdoc_variables_after_cursor()
_var = '$2'
if 'var' in _phpdoc:
	_var = _phpdoc['var']
snip.rv=_line`$0


/**
 * $1
 *
 * @return `!p snip.rv=_var`
 */
protected function _get`!p snip.rv=_cid`()
{
    return $this->`!p snip.rv=_id`;
}
endsnippet

snippet "((protected|public|private) \$([\w.]+).*vs)" "private setter" r
`!p 
_line = match.group(1)[:-2]
_cid = get_camelcase_identifier_from_string(_line, False)
_id = get_identifier_from_string(_line, False)
_phpdoc = get_phpdoc_variables_after_cursor()
_var = '$2'
if 'var' in _phpdoc:
	_var = _phpdoc['var']
snip.rv=_line`$0


/**
 * $1
 *
 * @param `!p snip.rv=_var` $$3
 * @return $this
 */
private _set`!p snip.rv=_cid`($$3)
{
    $this->`!p snip.rv=_id` = $$3;

    return $this;
}
endsnippet

snippet "((protected|public|private) \$([\w.]+).*vg)" "private getter" r
`!p 
_line = match.group(1)[:-2]
_cid = get_camelcase_identifier_from_string(_line, False)
_id = get_identifier_from_string(_line, False)
_phpdoc = get_phpdoc_variables_after_cursor()
_var = '$2'
if 'var' in _phpdoc:
	_var = _phpdoc['var']
snip.rv=_line`$0


/**
 * $1
 *
 * @return `!p snip.rv=_var`
 */
private _get`!p snip.rv=_cid`()
{
    return $this->`!p snip.rv=_id`;
}
endsnippet

snippet "((protected|public|private) \$([\w.]+).*us)" "public setter" r
`!p 
_line = match.group(1)[:-2]
_cid = get_camelcase_identifier_from_string(_line, False)
_id = get_identifier_from_string(_line, False)
_phpdoc = get_phpdoc_variables_after_cursor()
_var = '$2'
if 'var' in _phpdoc:
	_var = _phpdoc['var']
snip.rv=_line`$0


/**
 * $1
 *
 * @param `!p snip.rv=_var` $$3
 * @return $this
 */
public function set`!p snip.rv=_cid`($$3)
{
    $this->`!p snip.rv=_id` = $$3;

    return $this;
}
endsnippet

snippet "((protected|public|private) \$([\w.]+).*ug)" "public getter" r
`!p 
_line = match.group(1)[:-2]
_cid = get_camelcase_identifier_from_string(_line, False)
_id = get_identifier_from_string(_line, False)
_phpdoc = get_phpdoc_variables_after_cursor()
_var = '$2'
if 'var' in _phpdoc:
	_var = _phpdoc['var']
snip.rv=_line`$0


/**
 * $1
 *
 * @return `!p snip.rv=_var`
 */
public function get`!p snip.rv=_cid`()
{
    return $this->`!p snip.rv=_id`;
}
endsnippet
