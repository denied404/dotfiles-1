global !p
import re
import os.path
import vim
endglobal

context "snip.context=snip"
snippet e "" bwe
`!p
left = " "
right="()"
right = right[10]
if "\n" in t[1]:
	tabs = snip.context.column-1
	left = " func(){"
	right = "\n"+(tabs*"\t")+"}()"
`defer`!p snip.rv=left`$1`!p snip.rv=right`
endsnippet

snippet (s "(string" i
(string
endsnippet

snippet ([]s "([]string" i
([]string
endsnippet

snippet (b "(bool" i
(bool
endsnippet

snippet (i "(int" i
(int
endsnippet

#context "px.util.match_higher_indent(snip.buffer, (snip.line, 0), '^var \(')"
#snippet a "" wbe
#$1 = args["$2"].($3)
#$0
#endsnippet

snippet a "arg" w
args["$1"].($2)
endsnippet

snippet dcp "docopt" w
args := godocs.MustParse(usage, version, godocs.UsePager)
endsnippet

snippet f "false" w
false
endsnippet

snippet t "true" w
true
endsnippet

snippet ae "assert.Equal" wb
assert.Equal(t, $1, $2)
endsnippet

snippet pt "print trace" wb
{`!p
if t[1] == "0":
	snip.rv="\n\t\tprintln(\`========================XXXXXX\`)\n\t"
else:
	snip.rv=''
`	_, file, line, _ := runtime.Caller(${1:0})
	print("stack #$1: ", file, ":", line, "\n")
}
$0
endsnippet

snippet ptf "print trace" wb
{
	println("================================================================")
	println("stack trace:")
	step := 0
	for {
		_, file, line, ok := runtime.Caller(step)
		if !ok {
			println("end of stack")
			break
		}
		println("stack #", step, ": ", file, ":", line)
		step++
	}
}
$0
endsnippet

snippet m "map[whatever]whatever" w
map[${1:string}]${2:interface\{\}}
endsnippet

snippet ms "map[string]whatever" w
map[string]${1:interface\{\}}
endsnippet

snippet mss "map[string]string" w
map[string]string
endsnippet

snippet "map\[(\w+)\]i" "map[\w]interface{}" r
map[`!p snip.rv=match.group(1)`]interface{}$0
endsnippet

snippet []s "[]string" w
[]string{$1}$0
endsnippet

snippet c "construct structure" w
$2 = $1{
	$3,
}
endsnippet


priority 10
snippet "= c" "construct structure"
= $1{
	$2,
}
endsnippet

snippet u "usage" w
version = "1.0"
usage = \`$1 \` + version + \`
$2

Usage:
	$1 $3
	$1 -h | --help
	$1 --version

Options:
	-h --help		Show this screen.
	--version       Show version.
\`
endsnippet

snippet he "" w
hierr.Errorf(err, "$1"${2/(.+)/, /}$2)
endsnippet

snippet dd "" w
p.parseMethodStmt(receiver, $1)
endsnippet

# logger
snippet lo "" wb
const logFormat = \`${level:%s\::right:false} ${time} ${prefix}%s\`

func getLogger() lorg.Logger {
	logger := lorg.NewLog()
	logger.SetFormat(lorg.NewFormat(logFormat))
	logger.SetLevel(lorg.LevelDebug)

	return logger
}

func debugf(format string, values ...interface{}) {
    logger.Debugf(format, values...)
}

func infof(format string, values ...interface{}) {
    logger.Infof(format, values...)
}

func fatalf(format string, values ...interface{}) {
    logger.Fatalf(format, values...)
}

func errorf(format string, values ...interface{}) {
    logger.Errorf(format, values...)
}
endsnippet

# debugf
snippet jwd "" wA
`!p
expand = False
if t[2] != "" or "%" in t[1]:
    expand = True
`debugf(`!p
if expand:
    snip.rv = "\n\t\t\""
else:
    snip.rv = "\""
`$1`!p
if expand:
    snip.rv = "\",\n\t\t"
else:
    snip.rv = "\""
`$2`!p
if expand:
    snip.rv = " ,\n\t)"
else:
    snip.rv = ")"
`
$0
endsnippet

# infof
snippet jwi "" wA
`!p
expand = False
if t[2] != "" or "%" in t[1]:
    expand = True
`infof(`!p
if expand:
    snip.rv = "\n\t\t\""
else:
    snip.rv = "\""
`$1`!p
if expand:
    snip.rv = "\",\n\t\t"
else:
    snip.rv = "\""
`$2`!p
if expand:
    snip.rv = " ,\n\t)"
else:
    snip.rv = ")"
`
$0
endsnippet

# fatalf
snippet jwf "" wA
`!p
expand = False
if t[2] != "" or "%" in t[1]:
    expand = True
`fatalf(`!p
if expand:
    snip.rv = "\n\t\t\""
else:
    snip.rv = "\""
`$1`!p
if expand:
    snip.rv = "\",\n\t\t"
else:
    snip.rv = "\""
`$2`!p
if expand:
    snip.rv = " ,\n\t)"
else:
    snip.rv = ")"
`
$0
endsnippet

# errorf
snippet jwe "" wA
`!p
expand = False
if t[2] != "" or "%" in t[1]:
    expand = True
`errorf(`!p
if expand:
    snip.rv = "\n\t\t\""
else:
    snip.rv = "\""
`$1`!p
if expand:
    snip.rv = "\",\n\t\t"
else:
    snip.rv = "\""
`$2`!p
if expand:
    snip.rv = " ,\n\t)"
else:
    snip.rv = ")"
`
$0
endsnippet

# hierr.Errorf
snippet hh "" wA
hierr.Errorf(
    ${1:err},
    $2,
)$0
endsnippet

snippet hp "" w
hierr.Push(
    hierr.Errorf(
        $1,$2
    ),
    $3,
)
endsnippet

# hierr.Fatalf
snippet hf "" wA
hierr.Fatalf(
    ${1:err},
    $2,
)$0
endsnippet
