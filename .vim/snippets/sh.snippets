snippet u "" w
[ $1 ] && $0
endsnippet

snippet r "re" w
return
endsnippet

snippet se "Description" w
set -euo pipefail
endsnippet

snippet gp "Description" w
while getopts ":$1" arg; do
	local value="$OPTARG"
	case $arg in
		$2
		h)
			show_usage
			;;
	esac
done

local OPTIND

$0
endsnippet

snippet m "main" w
usage() {
	echo "
$1

Usage:
	$2

Options:
	$3
"
}

__main__() {
	$4

	show_usage
	exit 1
}

$5


if [ $# -eq 0 ]; then
	usage
	exit 2
fi

if [ "\$1" == "-h" ] || [ "\$1" == "--help" ]; then
	usage
	exit 0
fi

__main__ $@
endsnippet

snippet er "exec 2>&1" w
exec 2>&1 >${1:/dev/null}
endsnippet

snippet ! "shebang" bw
#!/bin/bash
$0
endsnippet

snippet p "" w
echo "$1" >> /tmp/debug
endsnippet

snippet i# "i#" w
if [ $# -ne $1 ]; then
	usage
	exit 1
fi
endsnippet

snippet in "if" bw
if [ "$1" != "$2" ]; then
	$3
fi
endsnippet

snippet i "if" bw
if [ $1 ]; then
	$2
fi
endsnippet

snippet ii "if" bw
if [ $1 ]; then
	$2
fi
endsnippet

snippet f "function" bw
$1() {
	$2
}
endsnippet

snippet l "local" w
local $1="$2"
endsnippet

snippet e "Description" wb
echo $1
endsnippet

snippet pr "pr" bw
echo `!p snip.rv=os.path.basename(vim.current.buffer.name)`:`!p snip.rv=str(vim.current.window.cursor[0])` '`!p snip.rv=t[1]`: ['$1']' >> /tmp/debug
endsnippet

snippet nc "Description" w
echo ${1:${VISUAL}} | nc localhost 1399
endsnippet


snippet k "put stdin" w
<<EOF
$1
EOF

endsnippet

snippet tas "tas" w
tests:assert-success
$0
endsnippet

snippet tt "" w
$(tests:get-tmp-dir)$0
endsnippet

snippet j "pass stdin as file" w
<<<EOF
$1
EOF
endsnippet

snippet gf "log func" w
log() {
	echo ">>> $@"
}
endsnippet

snippet g "log" w
log "$1"
endsnippet

snippet "    ;;" "" wr
    ;;

$1)
	$2
	;;
endsnippet

snippet b "" w
[ -x /bin/systemd-cat-bash ] && /bin/systemd-cat-bash $(basename "\$0")
$0
endsnippet

snippet x "" w
set -x
endsnippet

snippet c "" w
case "$1" in
	$2)
		$3
		;;$4
esac
endsnippet
