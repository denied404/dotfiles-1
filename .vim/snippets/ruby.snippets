global !p

from snippets import *

import px
for full_name, name in px.libs().items():
    exec("import " + full_name)
endglobal

snippet bin "binary app" bw
#!/usr/bin/env ruby

require "docopt"

doc = <<DOCOPT

$1.

Usage:
    $2

Options:
    $3
	-h --help    Show this screen.
DOCOPT

begin
    args = Docopt::docopt(doc)
rescue Docopt::Exit => e
    puts e.message
end
endsnippet

snippet pp "print" w
require "pp"
pp $1
endsnippet

snippet f "Description" w
def $1($2)
	$3
end
endsnippet


global !p
def should_expand_usage(snip):
	if px.util.match_higher_indent(snip.buffer, (snip.line, 0), '^Usage:'):
		prev_line = snip.buffer[snip.line-1]
		matches = re.match(r'\s+([\w\d\-\_]+)', prev_line)
		if not matches:
			return {'name': ""}
		return {'name': matches.group(1)}

	return False
endglobal

snippet "^(\s+)" "expand usage" "should_expand_usage(snip)" re
`!p snip.rv=match.group(1)``!p snip.rv=snip.context['name']` $1
endsnippet

snippet a "args" w
args["$1"]
endsnippet

snippet r "return" w
return $0
endsnippet

snippet rf "Description" w
return FALSE
endsnippet

snippet e "end" w
end
endsnippet

snippet p "puts" w
puts "`!p
try:
	once
except:
	once = True
	cursor = px.cursor.get()
	filename = os.path.basename(px.buffer.get().name)

snip.rv=filename + ":" + str(cursor[0])
`: $0"
endsnippet

snippet pr "puts" w
puts "`!p
try:
	once
except:
	once = True
	cursor = px.cursor.get()
	filename = os.path.basename(px.buffer.get().name)

snip.rv=filename + ":" + str(cursor[0])
`: `!p snip.rv=t[1]`: #{$1}"
endsnippet

priority 10
snippet "return f" "Description"
return FALSE
endsnippet

snippet rt "return true" w
return TRUE
endsnippet

priority 10
snippet "return t" "Description" w
return TRUE
endsnippet

snippet i "if" w
if $1
	$2
end
$0
endsnippet

snippet d "" w
def $1
  $0
end
endsnippet
